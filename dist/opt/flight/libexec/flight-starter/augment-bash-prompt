#!/usr/bin/env ruby
#==============================================================================
# Copyright (C) 2020-present Alces Flight Ltd.
#
# This file is part of Flight Starter.
#
# This program and the accompanying materials are made available under
# the terms of the Eclipse Public License 2.0 which is available at
# <https://www.eclipse.org/legal/epl-2.0>, or alternative license
# terms made available by Alces Flight Ltd - please direct inquiries
# about licensing to licensing@alces-flight.com.
#
# Flight Starter is distributed in the hope that it will be useful, but
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR
# IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS
# OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A
# PARTICULAR PURPOSE. See the Eclipse Public License 2.0 for more
# details.
#
# You should have received a copy of the Eclipse Public License 2.0
# along with Flight Starter. If not, see:
#
#  https://opensource.org/licenses/EPL-2.0
#
# For more information on Flight Starter, please visit:
# https://github.com/openflighthpc/flight-starter
#==============================================================================
ps1 = ARGV[0]
shlvl = ARGV[1].to_i || 1
name = ARGV[2] || "your cluster"
col = ARGV[3] || "1;32;40"
inside = false
injected_cluster_name = false
injected_shell_level = false
n = "\\[\\e[#{col}m\\](#{name})\\[\\e[0m\\]"
parts = ps1.split(/(\\\[)(.*?)(\\\])/)
mapped = parts.map do |x|
  if x == '\['
    inside = true
  elsif x == '\]'
    inside = false
  elsif !inside
    injected_cluster_name ||=
      x.gsub!('\h',"\\h #{n}") ||
      x.gsub!('\W',"#{n} \\W") ||
      x.gsub!('\w',"#{n} \\w") ||
      x.gsub!('\$',"#{n} \\$")
  end
  x
end
if shlvl > 1
  mapped = mapped.reverse.map do |x|
    if x == '\]'
      inside = true
    elsif x == '\['
      inside = false
    elsif !inside
      injected_shell_level ||=
        x.gsub!('\$',"(+)\\$") ||
        x.gsub!('\u',"(+)\\u") ||
        x.gsub!('\h',"(+)\\h") ||
        x.gsub!('\w',"\\w(+)") ||
        x.gsub!('\W',"\\W(+)")
    end
    x
  end.reverse
end
puts mapped.join
